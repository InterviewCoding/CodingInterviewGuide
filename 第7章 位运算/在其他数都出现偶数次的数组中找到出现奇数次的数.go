package main

/**
 * @Author: yirufeng
 * @Email: yirufeng@foxmail.com
 * @Date: 2020/11/6 7:14 下午
 * @Desc:
 */

//--------------------------问题1：在其他数都出现偶数次的情况下只有一个数出现了奇数次，打印这个数--------------------------
//思路：直接对数组中所有的数字进行异或并返回结果
func findOnceNum(arr []int) int {
	//为什么赋值为0，因为0与任何数进行异或都会返回0
	ret := 0
	for i := 0; i < len(arr); i++ {
		ret ^= arr[i]
	}

	return ret
}

//--------------------------进阶问题之问题2：在其他数都出现偶数次的情况下只有两个个数出现了奇数次，打印这个数--------------------------
//思路：假设两个出现奇数次的数为n1, n2，那么我们对数组进行异或得到的是n1^n2，此时我们获取n1^n2中二进制表示中最右边为1的那位，
//之后根据这一位我们可以说，两个出现奇数次的数一个数在该位上为1，1个为0。
//之后我们对数组中所有在该位上为1的所有数进行异或得到的是该位为1的出现奇数次的那个数，假设为n1
//之后我们将n1^n2 与 刚才求出的n1进行异或得到n2
func findOnceNums2(arr []int) (int, int) {
	e0, e0HasOne := 0, 0
	for i := 0; i < len(arr); i++ {
		e0 ^= arr[i]
	}

	//此时e0便是两个只出现1次的数异或的结果
	//此时我们获取e0的最右边的1
	//注意点：Golang中取反方式为^
	rightOne := (^e0 + 1) & e0
	//此时我们的e0HasOne只与rightOne与运算之后为1的异或
	for i := 0; i < len(arr); i++ {
		//注意这里是不等于0，因为我们不知道哪一位上的二进制位是1，但是肯定是不等于0的
		if rightOne&arr[i] != 0 {
			e0HasOne ^= arr[i]
		}
	}
	//此时e0HasOne便是那个两个出现奇数次中右边1位为1的那个数
	return e0 ^ e0HasOne, e0HasOne
}
